//
//  Interface.swift
//  AppV3
//
//  Created by etudiant on 22/04/2025.
//
import SwiftUI
import DGCharts

// UIView personnalisée contenant le LineChartView

class LineChartUIView: UIView {
    var tousLesCartes: [Carte] = AppDelegate.data // Liste des cartes à afficher

    private let lineChartView = LineChartView()

    override init(frame: CGRect) {
        super.init(frame: frame)
        setupChartView()
        setChartData()
    }

    required init?(coder: NSCoder) {
        super.init(coder: coder)
        setupChartView()
        setChartData()
    }

    public func setupChartView() {
        addSubview(lineChartView)
        lineChartView.translatesAutoresizingMaskIntoConstraints = false

        NSLayoutConstraint.activate([
            lineChartView.leadingAnchor.constraint(equalTo: leadingAnchor),
            lineChartView.trailingAnchor.constraint(equalTo: trailingAnchor),
            lineChartView.topAnchor.constraint(equalTo: topAnchor),
            lineChartView.bottomAnchor.constraint(equalTo: bottomAnchor)
        ])

        lineChartView.chartDescription.enabled = true
        lineChartView.chartDescription.text = "Révisions de cartes"
        lineChartView.rightAxis.enabled = false
    }

    public func setChartData() {
        var chartEntries: [ChartDataEntry] = []
        
        // Calculer les entrées du graphique pour chaque carte
        for carte in tousLesCartes {
            // Assurer que la date de révision existe
            if !carte.dateProchaineRevision.isEmpty {
                // Effectuer l'opération si la date n'est pas vide
                let dateFormatter = DateFormatter()
                dateFormatter.dateFormat = "yyyy-MM-dd"
                if let prochaineRevisionDate = dateFormatter.date(from: carte.dateProchaineRevision) {
                    let today = Date()
                    let daysUntilRevision = Calendar.current.dateComponents([.day], from: today, to: prochaineRevisionDate).day ?? 0
                    
                    // Nombre de révisions effectuées basé sur le niveau de la carte
                    let nombreDeRevisions = Double(carte.niveauCarte) // Utiliser le niveau de la carte comme nombre de révisions
                    
                    // Ajouter l'entrée du graphique : x = jours avant la révision, y = nombre de révisions
                    let entry = ChartDataEntry(x: Double(daysUntilRevision), y: nombreDeRevisions)
                    chartEntries.append(entry)
                }
            }
        }
        
        // Créer un dataset pour les données du graphique
        let dataSet = LineChartDataSet(entries: chartEntries, label: "Révisions par jour")
        dataSet.circleRadius = 4
        dataSet.lineWidth = 2
        dataSet.valueFont = .systemFont(ofSize: 10) // Optionnel: ajout d'une police pour les valeurs
        
        // Appliquer le dataset au graphique
        let data = LineChartData(dataSet: dataSet)
        lineChartView.data = data
    }
}



// UIViewRepresentable pour intégrer à SwiftUI
struct LineChartViewContainer: UIViewRepresentable {
    func makeUIView(context: Context) -> LineChartUIView {
        return LineChartUIView()
    }

    func updateUIView(_ uiView: LineChartUIView, context: Context) {
        // Si tu veux mettre à jour les données dynamiquement, tu le fais ici.
    }
}

struct ContentView: View {
    var body: some View {
        VStack {
            Text("Graphique des révisions de cartes")
                .font(.headline)
                .padding()

            LineChartViewContainer()
                .frame(height: 300)
                .padding(.horizontal)
        }
    }
}
