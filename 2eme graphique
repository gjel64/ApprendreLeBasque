//
//  StatnbCartes.swift
//  EuskApp
//
//  Created by etudiant on 27/04/2025.
//
// 2eme graphique avec le nombre de carte de chaque type (bleu/vert/rouge) révisée
//
import SwiftUI
import DGCharts


class BarChartUIViewNbCartes: UIView {
    var tousLesCartes: [Carte] = AppDelegate.lesPaquets[0].getCartes() // Liste des cartes à afficher

    private let barChartView = BarChartView()

    override init(frame: CGRect) {
        super.init(frame: frame)
        setupChartView()
        setChartData()
    }

    required init?(coder: NSCoder) {
        super.init(coder: coder)
        setupChartView()
        setChartData()
    }

    public func setupChartView() {
        addSubview(barChartView)
        barChartView.translatesAutoresizingMaskIntoConstraints = false

        NSLayoutConstraint.activate([
            barChartView.leadingAnchor.constraint(equalTo: leadingAnchor),
            barChartView.trailingAnchor.constraint(equalTo: trailingAnchor),
            barChartView.topAnchor.constraint(equalTo: topAnchor),
            barChartView.bottomAnchor.constraint(equalTo: bottomAnchor)
        ])

        barChartView.chartDescription.enabled = true
        barChartView.rightAxis.enabled = false
    }

    public func setChartData() {
        var typeToCount: [String: Int] = [
                "Rouge": 0,
                "Bleu": 0,
                "Vert": 0
            ]
            
            // Parcourir tous les paquets
            for paquet in AppDelegate.lesPaquets {
                for carte in paquet.getCartes() {
                    if !carte.getRevisionsCartes().isEmpty {
                        // Supposons que l'étatCarte détermine le type:
                        // 0 = Rouge, 1 = Bleu, 2 = Vert
                        switch carte.getEtatCarte() {
                            case 0:
                                typeToCount["Rouge", default: 0] += 1
                            case 1:
                                typeToCount["Bleu", default: 0] += 1
                            case 2:
                                typeToCount["Vert", default: 0] += 1
                            default:
                                break
                        }
                    }
                }
            }
            
            // Convertir en BarChartDataEntry
            let types = ["Rouge", "Bleu", "Vert"]
            var chartEntries: [BarChartDataEntry] = []
            
            for (index, type) in types.enumerated() {
                if let count = typeToCount[type] {
                    chartEntries.append(BarChartDataEntry(x: Double(index), y: Double(count)))
                }
            }
            
            // Créer un dataset
            let dataSet = BarChartDataSet(entries: chartEntries, label: "Cartes révisées par type")
            dataSet.colors = [NSUIColor.red, NSUIColor.blue, NSUIColor.green] // Couleurs correspondantes

            // Appliquer le dataset
            let data = BarChartData(dataSet: dataSet)
            barChartView.data = data
            
            // Formater l'axe X avec les types
            barChartView.xAxis.valueFormatter = IndexAxisValueFormatter(values: types)
            barChartView.xAxis.granularity = 1
            barChartView.xAxis.labelPosition = .bottom
            barChartView.xAxis.labelRotationAngle = 0
        }
    
    func recupererLaDateDaujourdhui() -> String {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        let todayDate = dateFormatter.string(from: Date())
        return todayDate
    }
    
    func ajouterJoursADate(date: String, nbJours: Int) -> String? {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        
        guard let dateObjet = dateFormatter.date(from: date) else {
            print("Format de date invalide")
            return nil
        }
        
        let dateAjoutee = Calendar.current.date(byAdding: .day, value: nbJours, to: dateObjet)!
        
        return dateFormatter.string(from: dateAjoutee)
    }
}




// UIViewRepresentable pour intégrer à SwiftUI
struct BarChartViewContainerNbCarteParType: UIViewRepresentable {
    func makeUIView(context: Context) -> BarChartUIView {
        return BarChartUIView()
    }

    func updateUIView(_ uiView: BarChartUIView, context: Context) {
        // Si tu veux mettre à jour les données dynamiquement, tu le fais ici.
    }
}

struct ContentViewNbCarteParType: View {
    var body: some View {
        VStack {
            Text("Graphique des nombres de carte par type ")
                .font(.headline)
                .padding()

            BarChartViewContainer()
                .frame(height: 300)
                .padding(.horizontal)
        }
    }
}


