var numNvCarte, numRepasserCarte, numRevisionCarte : [(Int, Int)] = [] // select num, niveauCarte ++ order by date
var nbNvRepRev : [Int] = [] //count 3 *
let nbTotal: Int = max(0, (nbNvRepRev.count >= 3 ? nbNvRepRev[0] + nbNvRepRev[1] + nbNvRepRev[2] - 3 : 0)) // donnera le nb de cartes révisées - 1
//récupération des données avec la BDD

numNvCarte.shuffle()
numRepasserCarte.shuffle()
numRevisionCarte.shuffle()

struct Carte {
    var numCarte : Int
    var etatCarte : Int // rouge bleue vert
    var niveauCarte : Int // suite leitner
}

var ordreRevision : [Carte] = []
let intervalleRevisionGood : [Int] = [0, 1, 3, 7, 12, 20, 33, 54, 76, 106, 150]

func getOrdreRevisionDuPaquet() -> [Carte] {
    var roue : Int = 0
    //mise en place d'une roue pour l'ordre des révisions
    var i : Int = 0
    var indexNv : Int = 0
    var indexRep : Int = 0
    var indexRev : Int = 0
    var limiteNbTotal : Int = nbTotal
    while ( i < limiteNbTotal ) {
        if ( i % 3 == 0) {
            if (indexNv <= nbNvRepRev[0]) {
                ordreRevision.append(Carte(numCarte: numNvCarte[indexNv].0, etatCarte: 0, niveauCarte: numNvCarte[indexNv].1))
                indexNv += 1
                
            }
            i += 1
        }
        if ( i % 3 == 1) {
            if (indexRep <= nbNvRepRev[1]) {
                ordreRevision.append(Carte(numCarte: numRepasserCarte[indexRep].0, etatCarte: 1, niveauCarte: numRepasserCarte[indexRep].1))
                indexRep += 1
            }
            i += 1
        }
        if ( i % 3 == 2) {
            if (indexRev <= nbNvRepRev[2]) {
                ordreRevision.append(Carte(numCarte: numRevisionCarte[indexRev].0, etatCarte: 2, niveauCarte: numRevisionCarte[indexRev].1))
                indexRev += 1
            }
            i += 1
        }
    }
    return ordreRevision
}

//fonction pour remettre une carte dans le paquet de révision en fonction de l'écart
func remettreCarteDansPaquet( _ ecart : Int, _ index: Int){
    ecartChng : Int = ecart + 1
    var indexDeLaCarte : Int = index
    var inserer : Bool = false
    while (inserer == false) {
        ecartChng -= 1
        if (indexDeLaCarte + ecartChng <= nbTotal) {
            ordreRevision.insert(ordreRevision[indexDeLaCarte], at: indexDeLaCarte + ecartChng)
            inserer = true
        }
    }
}

func reviserPaquet() {
    nbRevisionAFaire : Int = nbTotal // donnera le nb de révision faites (!= nb de cartes révisées) 
    var i : Int = 0
    while (i < nbRevisionAFaire){
        if (ordreRevision[i].etatCarte == 0 ) {
            if (reviserNv(i) == true) {
                nbRevisionAFaire += 1
            }
        }
        else {
            if (ordreRevision[i].etatCarte == 1 ) {
                if (reviserRep(i) == true) {
                    nbRevisionAFaire += 1
                }
            }
            else {
                if (ordreRevision[i].etatCarte == 2 ) {
                    if (reviserRev(i) == true) {
                    nbRevisionAFaire += 1
                }
                }
            }
        }
    }
}

func reviserNv( _ index : Int) -> Bool{
    //afficher recto ordreRevision[indexCarte]
    //quand boutton "révéler" appuie afficher verso + extra
    //affichage des 3 bouttons 
    var indexCarte : Int = index
    if (/* Boutton Bon appuie */) {
        ordreRevision[indexCarte].etatCarte = 1
        remettreCarteDansPaquet(8, indexCarte)
        //ajouter les infos de révisions dans BDD
    }
    else {
        if (/* boutton difficile */) {
            remettreCarteDansPaquet(5, indexCarte)
            //ajouter les infos de révisions dans BDD
        }
        else {
            if (/* boutton faux */) {
                remettreCarteDansPaquet(3, indexCarte)
                //ajouter les infos de révisions dans BDD
            }
        }
    }
    return true
}

func reviserRep( _ index : Int) -> Bool  {
    //afficher recto ordreRevision[indexCarte]
    //quand boutton "révéler" appuie afficher verso + extra
    //affichage des 3 bouttons 
    var indexCarte : Int = index
    var inserer : Bool = false
    if (/* Boutton Bon appuie */) {
        ordreRevision[indexCarte].etatCarte = 2 
        ordreRevision[indexCarte].niveauCarte = 1
        //ajouter les infos de révisions dans BDD
    }
    else {
        if (/* boutton difficile */) {
            remettreCarteDansPaquet(3, indexCarte)
            ordreRevision[indexCarte].etatCarte = 1
            ordreRevision[indexCarte].niveauCarte = 0
            //ajouter les infos de révisions dans BDD
        }
        else {
            if (/* boutton faux */) {
                remettreCarteDansPaquet(5, indexCarte)
                ordreRevision[indexCarte].etatCarte = 1
                ordreRevision[indexCarte].niveauCarte = 0
                inserer = true
                //ajouter les infos de révisions dans BDD
            }
        }
    }
    return inserer
}

func reviserRev( _ index : Int) -> Bool  {
    //afficher recto ordreRevision[indexCarte]
    //quand boutton "révéler" appuie afficher verso + extra
    //affichage des 3 bouttons 
    var indexCarte : Int = index
    var inserer : Bool = false
    if (/* Boutton Bon appuie */) {
        ordreRevision[indexCarte].niveauCarte += 1
        //ajouter les infos de révisions dans BDD
    }
    else {
        if (/* boutton difficile */) {
            // prochaine révision : 
            ordreRevision[indexCarte].niveauCarte = ordreRevision[indexCarte].niveauCarte / 2
            if (ordreRevision[indexCarte].niveauCarte == 0) {
                ordreRevision[indexCarte].etatCarte = 1
                remettreCarteDansPaquet(5, indexCarte)
                inserer = true
            }
            //ajouter les infos de révisions dans BDD
        }
        else {
            if (/* boutton faux */) {
                remettreCarteDansPaquet(5, indexCarte)
                ordreRevision[indexCarte].etatCarte = 0
                ordreRevision[indexCarte].niveauCarte = 0
                inserer = true
                //ajouter les infos de révisions dans BDD
            }
        }
    }
    return inserer
}



//main
ordreRevision = getOrdreRevisionDuPaquet()
reviserPaquet()
